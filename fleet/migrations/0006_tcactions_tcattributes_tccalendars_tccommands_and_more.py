# Generated by Django 5.0.2 on 2025-07-15 10:52

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('fleet', '0005_alter_vehicleassignment_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TcActions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actiontime', models.DateTimeField()),
                ('address', models.CharField(blank=True, max_length=48, null=True)),
                ('userid', models.IntegerField(blank=True, null=True)),
                ('actiontype', models.CharField(max_length=32)),
                ('objecttype', models.CharField(blank=True, max_length=32, null=True)),
                ('objectid', models.IntegerField(blank=True, null=True)),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_actions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcAttributes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=4000)),
                ('type', models.CharField(max_length=128)),
                ('attribute', models.CharField(max_length=128)),
                ('expression', models.CharField(max_length=4000)),
                ('priority', models.IntegerField()),
            ],
            options={
                'db_table': 'tc_attributes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcCalendars',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('data', models.BinaryField()),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_calendars',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcCommands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=4000)),
                ('type', models.CharField(max_length=128)),
                ('textchannel', models.BooleanField()),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_commands',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcCommandsQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128)),
                ('textchannel', models.BooleanField()),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_commands_queue',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_attribute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_command',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceDriver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_driver',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceGeofence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_geofence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_maintenance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_order',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDeviceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_device_report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDevices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('uniqueid', models.CharField(max_length=128, unique=True)),
                ('lastupdate', models.DateTimeField(blank=True, null=True)),
                ('positionid', models.IntegerField(blank=True, null=True)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True)),
                ('model', models.CharField(blank=True, max_length=128, null=True)),
                ('contact', models.CharField(blank=True, max_length=512, null=True)),
                ('category', models.CharField(blank=True, max_length=128, null=True)),
                ('disabled', models.BooleanField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=8, null=True)),
                ('expirationtime', models.DateTimeField(blank=True, null=True)),
                ('motionstate', models.BooleanField(blank=True, null=True)),
                ('motiontime', models.DateTimeField(blank=True, null=True)),
                ('motiondistance', models.FloatField(blank=True, null=True)),
                ('overspeedstate', models.BooleanField(blank=True, null=True)),
                ('overspeedtime', models.DateTimeField(blank=True, null=True)),
                ('overspeedgeofenceid', models.IntegerField(blank=True, null=True)),
                ('motionstreak', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tc_devices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcDrivers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('uniqueid', models.CharField(max_length=128, unique=True)),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_drivers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128)),
                ('eventtime', models.DateTimeField()),
                ('deviceid', models.IntegerField(blank=True, null=True)),
                ('positionid', models.IntegerField(blank=True, null=True)),
                ('geofenceid', models.IntegerField(blank=True, null=True)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('maintenanceid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tc_events',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGeofences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('area', models.CharField(max_length=4096)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'tc_geofences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_attribute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_command',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupDriver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_driver',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupGeofence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_geofence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_maintenance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_order',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroupReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_group_report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'tc_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcKeystore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publickey', models.BinaryField()),
                ('privatekey', models.BinaryField()),
            ],
            options={
                'db_table': 'tc_keystore',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcMaintenances',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=4000)),
                ('type', models.CharField(max_length=128)),
                ('start', models.FloatField()),
                ('period', models.FloatField()),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_maintenances',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcNotifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('always', models.BooleanField()),
                ('notificators', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                'db_table': 'tc_notifications',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcOrders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.CharField(max_length=128)),
                ('description', models.CharField(blank=True, max_length=512, null=True)),
                ('fromaddress', models.CharField(blank=True, max_length=512, null=True)),
                ('toaddress', models.CharField(blank=True, max_length=512, null=True)),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcPositions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(blank=True, max_length=128, null=True)),
                ('servertime', models.DateTimeField()),
                ('devicetime', models.DateTimeField()),
                ('fixtime', models.DateTimeField()),
                ('valid', models.BooleanField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('altitude', models.FloatField()),
                ('speed', models.FloatField()),
                ('course', models.FloatField()),
                ('address', models.CharField(blank=True, max_length=512, null=True)),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('accuracy', models.FloatField()),
                ('network', models.CharField(blank=True, max_length=4000, null=True)),
                ('geofenceids', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'db_table': 'tc_positions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=32)),
                ('description', models.CharField(max_length=128)),
                ('attributes', models.CharField(max_length=4000)),
            ],
            options={
                'db_table': 'tc_reports',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcServers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration', models.BooleanField()),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('zoom', models.IntegerField()),
                ('map', models.CharField(blank=True, max_length=128, null=True)),
                ('bingkey', models.CharField(blank=True, max_length=128, null=True)),
                ('mapurl', models.CharField(blank=True, max_length=512, null=True)),
                ('readonly', models.BooleanField()),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('forcesettings', models.BooleanField()),
                ('coordinateformat', models.CharField(blank=True, max_length=128, null=True)),
                ('devicereadonly', models.BooleanField(blank=True, null=True)),
                ('limitcommands', models.BooleanField(blank=True, null=True)),
                ('poilayer', models.CharField(blank=True, max_length=512, null=True)),
                ('announcement', models.CharField(blank=True, max_length=4000, null=True)),
                ('disablereports', models.BooleanField(blank=True, null=True)),
                ('overlayurl', models.CharField(blank=True, max_length=512, null=True)),
                ('fixedemail', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tc_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capturetime', models.DateTimeField()),
                ('activeusers', models.IntegerField()),
                ('activedevices', models.IntegerField()),
                ('requests', models.IntegerField()),
                ('messagesreceived', models.IntegerField()),
                ('messagesstored', models.IntegerField()),
                ('attributes', models.CharField(max_length=4096)),
                ('mailsent', models.IntegerField()),
                ('smssent', models.IntegerField()),
                ('geocoderrequests', models.IntegerField()),
                ('geolocationrequests', models.IntegerField()),
                ('protocols', models.CharField(blank=True, max_length=4096, null=True)),
            ],
            options={
                'db_table': 'tc_statistics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_attribute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserCalendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserCommand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_command',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_device',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserDriver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_driver',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserGeofence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_geofence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserMaintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_maintenance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_order',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('email', models.CharField(max_length=128, unique=True)),
                ('hashedpassword', models.CharField(blank=True, max_length=128, null=True)),
                ('salt', models.CharField(blank=True, max_length=128, null=True)),
                ('readonly', models.BooleanField()),
                ('administrator', models.BooleanField(blank=True, null=True)),
                ('map', models.CharField(blank=True, max_length=128, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('zoom', models.IntegerField()),
                ('attributes', models.CharField(blank=True, max_length=4000, null=True)),
                ('coordinateformat', models.CharField(blank=True, max_length=128, null=True)),
                ('disabled', models.BooleanField(blank=True, null=True)),
                ('expirationtime', models.DateTimeField(blank=True, null=True)),
                ('devicelimit', models.IntegerField(blank=True, null=True)),
                ('userlimit', models.IntegerField(blank=True, null=True)),
                ('devicereadonly', models.BooleanField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True)),
                ('limitcommands', models.BooleanField(blank=True, null=True)),
                ('login', models.CharField(blank=True, max_length=128, null=True)),
                ('poilayer', models.CharField(blank=True, max_length=512, null=True)),
                ('disablereports', models.BooleanField(blank=True, null=True)),
                ('fixedemail', models.BooleanField(blank=True, null=True)),
                ('totpkey', models.CharField(blank=True, max_length=64, null=True)),
                ('temporary', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tc_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TcUserUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'tc_user_user',
                'managed': False,
            },
        ),
    ]
