"""
Django settings for e_service project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import sys

from decouple import config,Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY') 

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

#Site id: django.contrib.sites
SITE_ID = 2
ADMINS = [('Mahmoud Ali','mahmoud.ali@smrc.sd')]
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

# Force https
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)

# Inforce browsers to interact only via https
SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=2592000, cast=int)
SECURE_HSTS_INCLUDE_SUBDOMAINS = config("SECURE_HSTS_INCLUDE_SUBDOMAINS",default=True, cast=bool)
SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default=True, cast=bool)

#Cookie over https only
SESSION_COOKIE_SECURE = config("SESSION_COOKIE_SECURE", default=True, cast=bool)
CSRF_COOKIE_SECURE = config("CSRF_COOKIE_SECURE", default=True, cast=bool)

# Application definition

INSTALLED_APPS = [
    'dal', #django-autocomplete-light
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'user_sessions', #'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.gis',
    'django.contrib.humanize',
    
    # 3rd party
    'allauth', 
    'allauth.account', 
    'allauth.socialaccount',     
    
    'django_fsm',
    
    'bootstrap3',    
    
    'django_tables2',
    'django_filters',

    'import_export',

    'bootstrap_datepicker_plus',

    'django_crontab',

    'rest_framework',
    # 'rest_framework.authtoken',
    'rest_framework_simplejwt',

    # OTP 
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_email',
    # 'pwa',
    
    # Local                
    'accounts',
    'company_profile',    
    'check_cordinates',
    'pa',
    'help_request',
    'revenu_dist',
    'traditional_api',
    'gold_travel',
    'mokhalafat',
    'production_control',
    'gold_travel_traditional',
    'executive_office',
    'planning',
    'dabtiaat_altaedin',
    'sswg',
    'workflow',
    'it',
    'hse_traditional',
    'traditional_app',
    'company_profile_exploration',

    # Debug
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'user_sessions.middleware.SessionMiddleware', #'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_otp.middleware.OTPMiddleware',    
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    #3rd party
    'allauth.account.middleware.AccountMiddleware',

    # Debug
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

ROOT_URLCONF = 'e_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',   
                'company_profile.context_processors.in_progress_apps',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'e_service.wsgi.application'

SESSION_ENGINE = 'user_sessions.backends.db'
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    "default": {
        # "ENGINE": "django.db.backends.postgresql",
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": config('DB_NAME'),
        "USER": config('DB_USER'),
        "PASSWORD": config('DB_PASSWD'),
        "HOST": config('DB_HOST'),
        "PORT": config('DB_PORT'),
        "SSLMODE" :'require',
        # "CONN_MAX_AGE": 15,
        "CONN_HEALTH_CHECKS": True,
        "ATOMIC_REQUESTS": True,
        "OPTIONS": {
            # "pool": True,
        },
    }    
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ar'  #en-us

TIME_ZONE = 'Africa/Khartoum'

USE_I18N = True

USE_TZ = True

# USE_THOUSAND_SEPARATOR = True
# THOUSAND_SEPARATOR = ','
# DECIMAL_SEPARATOR = '.'
# NUMBER_GROUPING = 3

FORMAT_MODULE_PATH = [
    'e_service.formats'
]

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

LANGUAGES = [
	("ar","Arabic"),
    # ("en","English"),
]
    
    
# Media configurations
MEDIA_URL = 'media/'
MEDIA_ROOT = config('MEDIA_ROOT') #os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = config('STATIC_ROOT')
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",

    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

AUTH_USER_MODEL = 'accounts.CustomUser'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True

ACCOUNT_CHANGE_EMAIL = False
ACCOUNT_MAX_EMAIL_ADDRESSES = 1

ACCOUNT_ADAPTER = 'accounts.adapter.NoNewUsersAccountAdapter'

LOGIN_URL = config('LOGIN_URL')
LOGIN_REDIRECT_URL = 'profile:home'
ACCOUNT_LOGOUT_REDIRECT_URL = 'profile:home'

ACCOUNT_DEFAULT_PASSWORD = "changethispassword"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000

# logging 
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '[contactor] %(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        # Send all messages to console
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        # This is the "catch all" logger
        '': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}

# Debug
INTERNAL_IPS = [
    "127.0.0.1",
]

if not DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    DEFAULT_FROM_EMAIL = "system@mineralsgate.com"  # if you don't already have this in settings
    SERVER_EMAIL = "system@mineralsgate.com"  # ditto (default from-email for Django errors)

    EMAIL_HOST = "smtp.zeptomail.com"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_USE_SSL = False
    EMAIL_HOST_USER = config('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

SHOW_REQUESTS_URL = "profile:pa_request_show"

CRONJOBS = [
    ('*/30 5-17 * * *', 'pa.cron.generate_requests'),
    ('0 0 * * *', 'gold_travel_traditional.cron.expired_app'),
    ('0 0 1 * *', 'planning.cron.generate_tasks'),
]


SILENCED_SYSTEM_CHECKS = ['admin.E410']

BOOTSTRAP3 = {
    "form_renderers": {"default": "e_service.renderers.FormRenderer"},
}

# PWA_APP_NAME = 'My App'
# PWA_APP_DESCRIPTION = "My app description"
# PWA_APP_THEME_COLOR = '#0A0302'
# PWA_APP_BACKGROUND_COLOR = '#ffffff'
# PWA_APP_DISPLAY = 'standalone'
# PWA_APP_SCOPE = '/'
# PWA_APP_ORIENTATION = 'any'
# PWA_APP_START_URL = '/'
# PWA_APP_STATUS_BAR_COLOR = 'default'
# PWA_APP_ICONS = [
#     {
#         'src': '/static/images/my_app_icon.png',
#         'sizes': '160x160'
#     }
# ]
# PWA_APP_ICONS_APPLE = [
#     {
#         'src': '/static/images/my_apple_icon.png',
#         'sizes': '160x160'
#     }
# ]
# PWA_APP_SPLASH_SCREEN = [
#     {
#         'src': '/static/images/icons/splash-640x1136.png',
#         'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
#     }
# ]
# PWA_APP_DIR = 'rtl'
# PWA_APP_LANG = 'ar'
# PWA_APP_SHORTCUTS = [
#     {
#         'name': 'Shortcut',
#         'url': '/target',
#         'description': 'Shortcut to a page in my application'
#     }
# ]
# PWA_APP_SCREENSHOTS = [
#     {
#       'src': '/static/images/icons/splash-750x1334.png',
#       'sizes': '750x1334',
#       "type": "image/png"
#     }
# ]
# PWA_APP_DEBUG_MODE = config('DEBUG', default=False, cast=bool)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

TESTING = 'test' in sys.argv[1:]
if TESTING:
    print('=========================')
    print('In TEST Mode - Disabling Migrations')
    print('=========================')

    class DisableMigrations(object):

        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None

    MIGRATION_MODULES = DisableMigrations()